<template>
  <div class="home-container">
    <el-row :gutter="20">
      <el-col :span="24">
        <el-card class="welcome-card">
          <template #header>
            <div class="card-header">
              <h2>欢迎使用IQE动态检验系统</h2>
            </div>
          </template>
          <div class="welcome-content">
            <p class="system-intro">
              本系统基于各工厂、仓库检验状态，结合上线使用情况和实验室测试情况，智能推荐物料类别动态检验方案。
            </p>
            <el-button type="primary" class="architecture-btn" @click="goToPage('/architecture')">
              <el-icon-connection style="margin-right: 5px" />
              查看系统架构图解
            </el-button>
          </div>
        </el-card>
      </el-col>
    </el-row>

    <!-- 数据仪表盘 -->
    <el-row :gutter="20" class="dashboard-row">
      <el-col :span="24">
        <el-card class="dashboard-card">
          <template #header>
            <div class="card-header">
              <h2>系统数据概览</h2>
              <el-tag type="success">实时数据</el-tag>
            </div>
          </template>
          <div class="dashboard-content">
            <el-row :gutter="20">
              <el-col :xs="24" :sm="12" :md="6">
                <div class="data-card">
                  <div class="data-icon factory-icon">
                    <el-icon-goods />
                  </div>
                  <div class="data-info">
                    <div class="data-title">工厂物料</div>
                    <div class="data-value">{{ factoryData.length }}</div>
                    <div class="data-desc">
                      <span class="data-label">平均缺陷率:</span>
                      <span class="data-metric">{{ avgFactoryDefectRate }}%</span>
                    </div>
                  </div>
                </div>
              </el-col>
              <el-col :xs="24" :sm="12" :md="6">
                <div class="data-card">
                  <div class="data-icon lab-icon">
                    <el-icon-data-analysis />
                  </div>
                  <div class="data-info">
                    <div class="data-title">实验室测试</div>
                    <div class="data-value">{{ labData.length }}</div>
                    <div class="data-desc">
                      <span class="data-label">合格率:</span>
                      <span class="data-metric">{{ labPassRate }}%</span>
                    </div>
                  </div>
                </div>
              </el-col>
              <el-col :xs="24" :sm="12" :md="6">
                <div class="data-card">
                  <div class="data-icon online-icon">
                    <el-icon-monitor />
                  </div>
                  <div class="data-info">
                    <div class="data-title">上线使用</div>
                    <div class="data-value">{{ onlineData.length }}</div>
                    <div class="data-desc">
                      <span class="data-label">上线缺陷率:</span>
                      <span class="data-metric">{{ avgOnlineDefectRate }}%</span>
                    </div>
                  </div>
                </div>
              </el-col>
              <el-col :xs="24" :sm="12" :md="6">
                <div class="data-card">
                  <div class="data-icon risk-icon">
                    <el-icon-warning />
                  </div>
                  <div class="data-info">
                    <div class="data-title">高风险物料</div>
                    <div class="data-value">{{ highRiskCount }}</div>
                    <div class="data-desc">
                      <span class="data-label">占比:</span>
                      <span class="data-metric">{{ highRiskPercentage }}%</span>
                    </div>
                  </div>
                </div>
              </el-col>
            </el-row>
          </div>
        </el-card>
      </el-col>
    </el-row>

    <el-row :gutter="20" class="feature-row">
      <el-col :xs="24" :sm="12" :md="6">
        <el-card class="feature-card" shadow="hover">
          <div class="feature-icon">
            <el-icon-goods />
          </div>
          <h3>工厂/仓库物料</h3>
          <p>监控工厂和仓库物料的检验状态和缺陷率，及时发现异常情况</p>
          <el-button type="primary" @click="goToPage('/factory')">查看详情</el-button>
        </el-card>
      </el-col>
      <el-col :xs="24" :sm="12" :md="6">
        <el-card class="feature-card" shadow="hover">
          <div class="feature-icon">
            <el-icon-data-analysis />
          </div>
          <h3>实验室测试</h3>
          <p>跟踪物料的实验室测试结果，分析测试数据和趋势</p>
          <el-button type="primary" @click="goToPage('/lab')">查看详情</el-button>
        </el-card>
      </el-col>
      <el-col :xs="24" :sm="12" :md="6">
        <el-card class="feature-card" shadow="hover">
          <div class="feature-icon">
            <el-icon-monitor />
          </div>
          <h3>上线使用表现</h3>
          <p>监控物料在实际生产中的使用情况和缺陷表现</p>
          <el-button type="primary" @click="goToPage('/online')">查看详情</el-button>
        </el-card>
      </el-col>
      <el-col :xs="24" :sm="12" :md="6">
        <el-card class="feature-card" shadow="hover">
          <div class="feature-icon">
            <el-icon-cpu />
          </div>
          <h3>AI智能推荐</h3>
          <p>基于多维度数据分析，智能推荐物料类别的动态检验方案</p>
          <el-button type="primary" @click="goToPage('/ai')">查看详情</el-button>
        </el-card>
      </el-col>
    </el-row>

    <el-row :gutter="20">
      <el-col :span="24">
        <el-card class="overview-card">
          <template #header>
            <div class="card-header">
              <h2>系统概览</h2>
            </div>
          </template>
          <div class="overview-content">
            <p>IQE动态检验系统支持以下物料分类：</p>
            <el-row :gutter="20" class="category-list">
              <el-col :xs="24" :sm="12" :md="8" v-for="category in materialCategories" :key="category.id">
                <div class="category-item">
                  <h4>{{ category.name }}</h4>
                  <el-tag v-for="subcategory in category.subcategories" :key="subcategory" size="small" class="subcategory-tag">
                    {{ subcategory }}
                  </el-tag>
                </div>
              </el-col>
            </el-row>
          </div>
        </el-card>
      </el-col>
    </el-row>
    
    <!-- 趋势图表 -->
    <el-row :gutter="20">
      <el-col :xs="24" :md="12">
        <el-card class="chart-card">
          <template #header>
            <div class="card-header">
              <h2>物料类别风险分布</h2>
            </div>
          </template>
          <div class="chart-container" ref="riskDistributionChartRef"></div>
        </el-card>
      </el-col>
      <el-col :xs="24" :md="12">
        <el-card class="chart-card">
          <template #header>
            <div class="card-header">
              <h2>检验通过率趋势</h2>
            </div>
          </template>
          <div class="chart-container" ref="passRateChartRef"></div>
        </el-card>
      </el-col>
    </el-row>
    
    <!-- 动态检验方案推荐 -->
    <el-row :gutter="20">
      <el-col :span="24">
        <el-card class="recommendation-card">
          <template #header>
            <div class="card-header">
              <h2>动态检验方案推荐</h2>
              <el-button type="primary" size="small" @click="goToPage('/ai')">查看详细推荐</el-button>
            </div>
          </template>
          <div class="recommendation-content">
            <el-table :data="recommendationData" style="width: 100%" :header-cell-style="{ background: '#f5f7fa' }">
              <el-table-column prop="categoryName" label="物料类别" width="200" />
              <el-table-column prop="riskLevel" label="风险等级">
                <template #default="scope">
                  <el-tag :type="getRiskTagType(scope.row.riskLevel)">{{ scope.row.riskLevel }}</el-tag>
                </template>
              </el-table-column>
              <el-table-column prop="recommendation" label="检验建议" />
              <el-table-column prop="specificStrategy" label="专项策略" />
            </el-table>
          </div>
        </el-card>
      </el-col>
    </el-row>
  </div>
</template>

<script setup>
import { ref, computed, onMounted } from 'vue'
import { useRouter } from 'vue-router'
import { materialCategories } from '../data/material_categories.js'
import factoryDataJson from '../data/factory_data.json'
import labDataJson from '../data/lab_data.json'
import onlineDataJson from '../data/online_data.json'
import { recommendInspectionStrategy } from '../logic/recommend.js'
import * as echarts from 'echarts/core'
import { PieChart, BarChart } from 'echarts/charts'
import { 
  TitleComponent, 
  TooltipComponent, 
  LegendComponent,
  GridComponent
} from 'echarts/components'
import { LabelLayout } from 'echarts/features'
import { CanvasRenderer } from 'echarts/renderers'

// 注册必需的组件
echarts.use([
  TitleComponent, 
  TooltipComponent, 
  LegendComponent,
  GridComponent,
  PieChart,
  BarChart,
  LabelLayout,
  CanvasRenderer
])

const router = useRouter()
const factoryData = ref(factoryDataJson)
const labData = ref(labDataJson)
const onlineData = ref(onlineDataJson)
const riskDistributionChartRef = ref(null)
const passRateChartRef = ref(null)
let riskDistributionChart = null
let passRateChart = null

// 计算工厂平均缺陷率
const avgFactoryDefectRate = computed(() => {
  if (factoryData.value.length === 0) return 0
  const total = factoryData.value.reduce((sum, item) => sum + item.defect_rate, 0)
  return (total / factoryData.value.length).toFixed(2)
})

// 计算实验室测试合格率
const labPassRate = computed(() => {
  if (labData.value.length === 0) return 0
  const passCount = labData.value.filter(item => item.result === '合格').length
  return ((passCount / labData.value.length) * 100).toFixed(0)
})

// 计算上线平均缺陷率
const avgOnlineDefectRate = computed(() => {
  if (onlineData.value.length === 0) return 0
  
  let totalDefects = 0
  let totalItems = 0
  
  onlineData.value.forEach(item => {
    totalDefects += item.defect_count
    totalItems += item.total_count
  })
  
  return totalItems > 0 ? ((totalDefects / totalItems) * 100).toFixed(2) : 0
})

// 计算高风险物料数量
const highRiskCount = computed(() => {
  // 简单定义：工厂缺陷率>2%或实验室不合格或上线缺陷率>2%的物料
  const highRiskMaterials = new Set()
  
  factoryData.value.forEach(item => {
    if (item.defect_rate > 2) {
      highRiskMaterials.add(item.material_code)
    }
  })
  
  labData.value.forEach(item => {
    if (item.result === '不合格') {
      highRiskMaterials.add(item.material_code)
    }
  })
  
  onlineData.value.forEach(item => {
    if ((item.defect_count / item.total_count) * 100 > 2) {
      highRiskMaterials.add(item.material_code)
    }
  })
  
  return highRiskMaterials.size
})

// 计算高风险物料占比
const highRiskPercentage = computed(() => {
  const allMaterials = new Set()
  
  factoryData.value.forEach(item => allMaterials.add(item.material_code))
  labData.value.forEach(item => allMaterials.add(item.material_code))
  onlineData.value.forEach(item => allMaterials.add(item.material_code))
  
  return allMaterials.size > 0 
    ? ((highRiskCount.value / allMaterials.size) * 100).toFixed(0) 
    : 0
})

// 计算各类别风险分布
const categoryRiskData = computed(() => {
  const data = []
  
  materialCategories.forEach(category => {
    // 获取该类别的所有物料
    const categoryMaterials = new Set()
    const highRiskMaterials = new Set()
    const mediumRiskMaterials = new Set()
    const lowRiskMaterials = new Set()
    
    // 收集该类别的所有物料
    factoryData.value
      .filter(item => item.category_id === category.id)
      .forEach(item => categoryMaterials.add(item.material_code))
    
    labData.value
      .filter(item => item.category_id === category.id)
      .forEach(item => categoryMaterials.add(item.material_code))
    
    onlineData.value
      .filter(item => item.category_id === category.id)
      .forEach(item => categoryMaterials.add(item.material_code))
    
    // 分析风险等级
    categoryMaterials.forEach(code => {
      const factory = factoryData.value.find(item => item.material_code === code)
      const lab = labData.value.find(item => item.material_code === code)
      const online = onlineData.value.find(item => item.material_code === code)
      
      let isHighRisk = false
      let isMediumRisk = false
      
      // 工厂缺陷率判断
      if (factory && factory.defect_rate > 2) {
        isHighRisk = true
      } else if (factory && factory.defect_rate > 1) {
        isMediumRisk = true
      }
      
      // 实验室测试结果判断
      if (lab && lab.result === '不合格') {
        isHighRisk = true
      } else if (lab && lab.score < 80) {
        isMediumRisk = true
      }
      
      // 上线缺陷率判断
      if (online) {
        const defectRate = (online.defect_count / online.total_count) * 100
        if (defectRate > 2) {
          isHighRisk = true
        } else if (defectRate > 1) {
          isMediumRisk = true
        }
      }
      
      if (isHighRisk) {
        highRiskMaterials.add(code)
      } else if (isMediumRisk) {
        mediumRiskMaterials.add(code)
      } else {
        lowRiskMaterials.add(code)
      }
    })
    
    data.push({
      categoryId: category.id,
      categoryName: category.name,
      totalCount: categoryMaterials.size,
      highRiskCount: highRiskMaterials.size,
      mediumRiskCount: mediumRiskMaterials.size,
      lowRiskCount: lowRiskMaterials.size
    })
  })
  
  return data
})

// 计算各类别测试通过率
const categoryPassRateData = computed(() => {
  return materialCategories.map(category => {
    const categoryLabData = labData.value.filter(item => item.category_id === category.id)
    const passCount = categoryLabData.filter(item => item.result === '合格').length
    const passRate = categoryLabData.length > 0 
      ? (passCount / categoryLabData.length) * 100 
      : 0
    
    return {
      categoryName: category.name,
      passRate: parseFloat(passRate.toFixed(2))
    }
  })
})

// 生成推荐数据
const recommendationData = computed(() => {
  return materialCategories.map(category => {
    // 获取该类别的所有物料
    const categoryMaterials = []
    
    // 收集该类别的物料数据
    factoryData.value
      .filter(item => item.category_id === category.id)
      .forEach(item => {
        const materialData = {
          material_code: item.material_code,
          factoryData: item,
          labData: labData.value.find(lab => lab.material_code === item.material_code),
          onlineData: onlineData.value.find(online => online.material_code === item.material_code)
        }
        categoryMaterials.push(materialData)
      })
    
    // 确定风险等级
    let highRiskCount = 0
    let mediumRiskCount = 0
    let lowRiskCount = 0
    
    categoryMaterials.forEach(material => {
      const factory = material.factoryData
      const lab = material.labData
      const online = material.onlineData
      
      let isHighRisk = false
      let isMediumRisk = false
      
      // 工厂缺陷率判断
      if (factory && factory.defect_rate > 2) {
        isHighRisk = true
      } else if (factory && factory.defect_rate > 1) {
        isMediumRisk = true
      }
      
      // 实验室测试结果判断
      if (lab && lab.result === '不合格') {
        isHighRisk = true
      } else if (lab && lab.score < 80) {
        isMediumRisk = true
      }
      
      // 上线缺陷率判断
      if (online) {
        const defectRate = (online.defect_count / online.total_count) * 100
        if (defectRate > 2) {
          isHighRisk = true
        } else if (defectRate > 1) {
          isMediumRisk = true
        }
      }
      
      if (isHighRisk) {
        highRiskCount++
      } else if (isMediumRisk) {
        mediumRiskCount++
      } else {
        lowRiskCount++
      }
    })
    
    // 确定整体风险等级
    let riskLevel = '低风险'
    if (highRiskCount > 0) {
      riskLevel = '高风险'
    } else if (mediumRiskCount > 0) {
      riskLevel = '中等风险'
    }
    
    // 生成推荐策略
    let recommendation = ''
    let specificStrategy = ''
    
    switch (riskLevel) {
      case '高风险':
        recommendation = '建议执行全检 (100%)'
        break
      case '中等风险':
        recommendation = '建议加强抽检频次至50%'
        break
      case '低风险':
        recommendation = '建议执行常规抽检 (10%)'
        break
    }
    
    // 根据物料类别生成专项策略
    switch (category.id) {
      case 1: // 结构件-量产管理
        if (riskLevel === '高风险') {
          specificStrategy = '壳料/后摄镜片建议增加外观和尺寸全检'
        } else if (riskLevel === '中等风险') {
          specificStrategy = '建议关注外观和关键尺寸'
        }
        break
      case 2: // 结构件项目质量管理
        if (riskLevel === '高风险') {
          specificStrategy = '建议增加评审频次和样品确认环节'
        } else if (riskLevel === '中等风险') {
          specificStrategy = '建议关注首件确认和过程管控'
        }
        break
      case 3: // 电子器件
        if (riskLevel === '高风险') {
          specificStrategy = '建议增加电气性能和焊接可靠性测试'
        } else if (riskLevel === '中等风险') {
          specificStrategy = '建议关注布线质量和阻抗匹配'
        }
        break
      case 4: // 晶片类
        if (riskLevel === '高风险') {
          specificStrategy = '建议增加显示均匀性和亮度测试'
        }
        break
      case 5: // CAM/FP/电声/安规/包材物料组
        if (riskLevel === '高风险') {
          specificStrategy = '建议增加成像质量和低光测试'
        }
        break
    }
    
    return {
      categoryId: category.id,
      categoryName: category.name,
      riskLevel: riskLevel,
      recommendation: recommendation,
      specificStrategy: specificStrategy || '按标准流程执行'
    }
  })
})

// 获取风险标签类型
function getRiskTagType(level) {
  switch(level) {
    case '高风险': return 'danger'
    case '中等风险': return 'warning'
    case '低风险': return 'success'
    default: return 'info'
  }
}

function goToPage(path) {
  router.push(path)
}

// 初始化风险分布图表
function initRiskDistributionChart() {
  if (!riskDistributionChartRef.value) return
  
  if (riskDistributionChart) {
    riskDistributionChart.dispose()
  }
  
  riskDistributionChart = echarts.init(riskDistributionChartRef.value)
  
  const option = {
    tooltip: {
      trigger: 'item',
      formatter: '{b}: {c} ({d}%)'
    },
    legend: {
      orient: 'vertical',
      right: 10,
      top: 'center',
      data: categoryRiskData.value.map(item => item.categoryName)
    },
    series: [
      {
        name: '风险分布',
        type: 'pie',
        radius: ['40%', '70%'],
        avoidLabelOverlap: false,
        itemStyle: {
          borderRadius: 10,
          borderColor: '#fff',
          borderWidth: 2
        },
        label: {
          show: false,
          position: 'center'
        },
        emphasis: {
          label: {
            show: true,
            fontSize: '16',
            fontWeight: 'bold'
          }
        },
        labelLine: {
          show: false
        },
        data: categoryRiskData.value.map(item => ({
          name: item.categoryName,
          value: item.highRiskCount,
          itemStyle: {
            color: item.highRiskCount > 0 ? '#F56C6C' : '#67C23A'
          }
        }))
      }
    ]
  }
  
  riskDistributionChart.setOption(option)
}

// 初始化通过率图表
function initPassRateChart() {
  if (!passRateChartRef.value) return
  
  if (passRateChart) {
    passRateChart.dispose()
  }
  
  passRateChart = echarts.init(passRateChartRef.value)
  
  const option = {
    tooltip: {
      trigger: 'axis',
      axisPointer: {
        type: 'shadow'
      },
      formatter: '{b}: {c}%'
    },
    grid: {
      left: '3%',
      right: '4%',
      bottom: '3%',
      containLabel: true
    },
    xAxis: {
      type: 'category',
      data: categoryPassRateData.value.map(item => item.categoryName),
      axisLabel: {
        interval: 0,
        rotate: 30
      }
    },
    yAxis: {
      type: 'value',
      name: '通过率(%)',
      min: 0,
      max: 100,
      axisLabel: {
        formatter: '{value}%'
      }
    },
    series: [
      {
        name: '通过率',
        type: 'bar',
        data: categoryPassRateData.value.map(item => ({
          value: item.passRate,
          itemStyle: {
            color: item.passRate >= 90 ? '#67C23A' : (item.passRate >= 70 ? '#E6A23C' : '#F56C6C')
          }
        })),
        label: {
          show: true,
          position: 'top',
          formatter: '{c}%'
        }
      }
    ]
  }
  
  passRateChart.setOption(option)
}

onMounted(() => {
  // 初始化图表
  initRiskDistributionChart()
  initPassRateChart()
  
  // 响应窗口大小变化
  window.addEventListener('resize', () => {
    riskDistributionChart && riskDistributionChart.resize()
    passRateChart && passRateChart.resize()
  })
})
</script>

<style scoped>
.home-container {
  max-width: 1200px;
  margin: 0 auto;
}

.welcome-card {
  margin-bottom: 24px;
  text-align: center;
}

.card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.card-header h2 {
  margin: 0;
  font-size: 24px;
  color: #409EFF;
}

.welcome-content {
  padding: 20px 0;
}

.system-intro {
  font-size: 16px;
  line-height: 1.6;
  color: #606266;
}

.architecture-btn {
  margin-top: 16px;
}

/* 数据仪表盘样式 */
.dashboard-row {
  margin-bottom: 24px;
}

.dashboard-content {
  padding: 10px 0;
}

.data-card {
  display: flex;
  padding: 16px;
  border-radius: 8px;
  background-color: #f5f7fa;
  transition: all 0.3s;
}

.data-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
}

.data-icon {
  font-size: 40px;
  margin-right: 16px;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 60px;
  height: 60px;
  border-radius: 50%;
  color: white;
}

.factory-icon {
  background-color: #409EFF;
}

.lab-icon {
  background-color: #67C23A;
}

.online-icon {
  background-color: #E6A23C;
}

.risk-icon {
  background-color: #F56C6C;
}

.data-info {
  flex: 1;
}

.data-title {
  font-size: 14px;
  color: #909399;
  margin-bottom: 5px;
}

.data-value {
  font-size: 24px;
  font-weight: bold;
  color: #303133;
  margin-bottom: 5px;
}

.data-desc {
  font-size: 12px;
  color: #606266;
}

.data-label {
  margin-right: 5px;
}

.data-metric {
  font-weight: bold;
}

.feature-row {
  margin-bottom: 24px;
}

.feature-card {
  height: 100%;
  text-align: center;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px;
  transition: all 0.3s;
}

.feature-card:hover {
  transform: translateY(-5px);
}

.feature-icon {
  font-size: 48px;
  color: #409EFF;
  margin-bottom: 16px;
}

.feature-card h3 {
  margin-top: 0;
  margin-bottom: 12px;
  color: #303133;
}

.feature-card p {
  color: #606266;
  margin-bottom: 20px;
  flex-grow: 1;
}

.overview-card {
  margin-bottom: 24px;
}

.overview-content {
  padding: 20px 0;
}

.category-list {
  margin-top: 20px;
}

.category-item {
  margin-bottom: 16px;
  padding: 16px;
  border-radius: 4px;
  background-color: #f5f7fa;
}

.category-item h4 {
  margin-top: 0;
  margin-bottom: 12px;
  color: #303133;
}

.subcategory-tag {
  margin-right: 8px;
  margin-bottom: 8px;
}

.chart-card {
  margin-bottom: 24px;
}

.chart-container {
  height: 300px;
  width: 100%;
}

.recommendation-card {
  margin-bottom: 24px;
}

.recommendation-content {
  padding: 10px 0;
}
</style> 